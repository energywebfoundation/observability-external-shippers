name: Docker Image CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
    
env:
  ECR_REPOSITORY: ew-observability-external
  KUBECTL_VERSION: v1.18.15
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}
  HELM_VERSION: v3.2.4

jobs:
  
  cancel-previous:
    name: 'Cancel Previous Runs'
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - uses: styfle/cancel-workflow-action@0.5.0
        with:
          #workflow_id: 479426
          access_token: ${{ github.token }}
  
  
  build:
    runs-on: ubuntu-latest

    steps:

    - name: Checkout
      uses: actions/checkout@v2
    
    - name: Get the tag version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}
      
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Build & push docker images
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ steps.date.outputs.date }}
      run: |
        docker build -f app/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}
      
  kubernetes-deployment:
    name: Deploy on kubernetes
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

    - name: Set Cluster credentials
      run: |
        echo "$KUBECONFIG_FILE" | base64 --decode > ${HOME}/kubeconfig
        echo "KUBECONFIG=${HOME}/kubeconfig" >> $GITHUB_ENV
        echo "NAMESPACE=observability-external-staging" >> $GITHUB_ENV
    - name: Install kubectl
      run: |
        curl -LO https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_VERSION/bin/linux/amd64/kubectl
        chmod +x ./kubectl
        echo "$KUBECONFIG_FILE" | base64 --decode > ${HOME}/kubeconfig
    - name: Install helm
      run: |
        wget -qO- https://get.helm.sh/helm-$HELM_VERSION-linux-amd64.tar.gz | tar xvz -C ./
        mv linux-amd64/helm ./
        chmod 755 helm
        rm -rf linux-amd64/helm
        ./helm repo add stable https://charts.helm.sh/stable/
    - name: Get existing resources
      run: |
        ./helm -n $NAMESPACE ls
        ./kubectl -n $NAMESPACE get all
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

      
